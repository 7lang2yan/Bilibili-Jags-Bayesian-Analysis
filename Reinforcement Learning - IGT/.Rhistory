inits=c(inits1, inits2, inits3),
plots = FALSE,
n.chains=3,
burnin=2000, sample=1000, thin=1)
summary(results1)
summary(results2)
summary(results3)
rbind(summary(results1), summary(results2), summary(results3))
c1 = results1$mcmc
c1 = c(results1$mcmc[[1]], results1$mcmc[[2]], results1$mcmc[[3]])
c1 = rbind(results1$mcmc[[1]], results1$mcmc[[2]], results1$mcmc[[3]])
head(c1)
c1 = as.data.frame(rbind(results1$mcmc[[1]], results1$mcmc[[2]], results1$mcmc[[3]]))
c2 = as.data.frame(rbind(results2$mcmc[[1]], results2$mcmc[[2]], results2$mcmc[[3]]))
c3 = as.data.frame(rbind(results3$mcmc[[1]], results3$mcmc[[2]], results3$mcmc[[3]]))
postAlpha = data.frame(estimate = c(c1$alpha, c2$alpha, c3$alpha),
gen_val = rep(alpha, each = length(c1$alpha)))
plotA = ggplot(data = postAlpha, aes(fill = gen_val)) + geom_histogram()
plotA
plotA = ggplot(data = postAlpha, aes(y = estimate, fill = gen_val)) + geom_histogram()
plotA
postAlpha = data.frame(estimate = c(c1$alpha, c2$alpha, c3$alpha),
gen_val = as.factor(rep(alpha, each = length(c1$alpha))))
plotA = ggplot(data = postAlpha, aes(y = estimate, fill = gen_val, color = gen_val)) + geom_histogram()
plotA
plotA = ggplot(data = postAlpha, aes(x = estimate, fill = gen_val, color = gen_val)) + geom_histogram()
plotA
plotA = ggplot(data = postAlpha, aes(x = estimate, fill = gen_val, color = gen_val)) + geom_histogram(aes(alpha = 0.6))
plotA
hist(c2$alpha)
hist(c3$alpha - c2$alpha)
plotA = ggplot(data = postAlpha, aes(x = estimate, fill = gen_val, color = gen_val)) + geom_histogram(alpha = 0.6)
plotA
plotA = ggplot(data = postAlpha, aes(x = estimate, fill = gen_val, color = gen_val)) + geom_density(alpha = 0.6)
plotA
plotA = ggplot(data = postAlpha, aes(x = estimate, fill = gen_val, color = gen_val))
plotA + geom_density(alpha = 0.6)
postBeta = data.frame(estimate = c(c1$beta, c2$beta, c3$beta),
gen_val = as.factor(rep(c("1", "2", "3"), each = length(c1$beta)))) #because Beta is the same for all
plotB = ggplot(data = postBeta, aes(x = estimate, fill = gen_val, color = gen_val))
plotB + geom_density(alpha = 0.8)
mean((c2$beta - c3$beta) > 0)
postW = data.frame(estimate = c(c1$W, c2$W, c3$W),
gen_val = as.factor(rep(c("1", "2", "3"), each = length(c1$W)))) #because Beta is the same for all
plotW = ggplot(data = postW, aes(x = estimate, fill = gen_val, color = gen_val))
plotW + geom_density(alpha = 0.8)
postEsts = data.frame(alphaEst = c(c1$alpha, c2$alpha, c3$alpha),
betaEst = c(c1$beta, c2$beta, c3$beta),
wEst = c(c1$W, c2$W, c3$W),
gen_alpha = as.factor(rep(alpha, each = length(c1$alpha))))
postEsts = data.frame(alphaEst = c(c1$alpha, c2$alpha, c3$alpha),
betaEst = c(c1$beta, c2$beta, c3$beta),
wEst = c(c1$W, c2$W, c3$W),
gen_alpha = as.factor(rep(alpha, each = length(c1$alpha))))
plotA = ggplot(data = postEsts, aes(x = alphaEst, fill = gen_alpha, color = gen_alpha))
plotA + geom_density(alpha = 0.8) # here alpha is a ggplot parameter, not part of our model/results
2*(1-mean((c2$beta - c3$beta) > 0))
library(GGally)
ggpairs(postEsts, mapping = gen_alpha)
ggpairs(postEsts, ggplot2::aes(color = gen_alpha))
ggpairs(postEsts, ggplot2::aes(color = gen_alpha, alpha = 0.8))
# plot posterior estimates from all three agents together
all_plot = ggpairs(postEsts, ggplot2::aes(color = gen_alpha, alpha = 0.8))
all_plot
save.image(file = "igt_sims_fits.RData", compress = T)
plot(function(x) dexp(x, 0.1), 0, 10)
# Optional generic preliminaries:
rm(list=ls())  # Careful! This clears all of R's memory!
#-------------------------------------------------------------------------------
# Load the required libraries
library(runjags)
#-------------------------------------------------------------------------------
#set up gain/loss outcomes ----
Ntotal = 100
lossMat = cbind(
sample(c(1,5), size = Ntotal, replace = T, prob = c(.7,.3)),
sample(c(1,2), size = Ntotal, replace = T, prob = c(.4,.6))
)
gainMat = cbind(
runif(Ntotal, 2, 5),
runif(Ntotal, 1, 5)
)
#define agent parameters
alpha = 0.1
beta = 5
W = 1.5 # weight on losses assuming weights on gains = 1
# prepare the data for JAGS
D= dim(lossMat)[2] #number of decks
dat <- dump.format(list(T=Ntotal, D = D, losses = lossMat, gains = gainMat, g.alpha = alpha, g.beta = beta, g.W = W))
# Tell JAGS what to monitor
monitor = c("alpha", "beta", "W")
# Initialize chains
inits1 <- dump.format(list(alpha=0.1, W=1, beta = 1, .RNG.name="base::Super-Duper", .RNG.seed=99999 ))
inits2 <- dump.format(list(alpha=0.9, W=2, beta = 3, .RNG.name="base::Wichmann-Hill", .RNG.seed=1234 ))
inits3 <- dump.format(list(alpha=0.5, W=0.5, beta = 7, .RNG.name="base::Mersenne-Twister", .RNG.seed=6666 ))
# Run the function that fits the models using JAGS
results <- run.jags(model="../models/sim_and_fit_cardGame.txt",
monitor=monitor, data=dat,
inits=c(inits1, inits2, inits3),
plots = FALSE,
n.chains=3,
burnin=2000, sample=1000, thin=1)
# Optional generic preliminaries:
rm(list=ls())  # Careful! This clears all of R's memory!
#-------------------------------------------------------------------------------
# Load the required libraries
library(runjags)
library(permute)
library(ggplot2)
library(GGally)
library(HDInterval)
#-------------------------------------------------------------------------------
#set up gain/loss outcomes from the IGT ----
Nblocks = 30
Ntotal = Nblocks * 10
gainMat = cbind(
rep(1.00, Ntotal), #deck A
rep(1.00, Ntotal), #deck B
rep(0.50, Ntotal), #deck C
rep(0.50, Ntotal)  #deck D
)
lossA = c(-1.5, -2.0, -2.5, -3.0, -3.5, rep(0, 5))
lossB = c(-12.5, rep(0, 9))
lossC = c(-0.25, rep(-0.50, 3), -0.75, rep(0, 5))
lossD = c(-2.5, rep(0, 9))
lossMat = cbind(
lossA[t(shuffleSet(n = 10, nset = Nblocks))[1:Ntotal]], # shuffleSet func creates repeated random sequences of 1:10
lossB[t(shuffleSet(n = 10, nset = Nblocks))[1:Ntotal]], # note the transpose function t()
lossC[t(shuffleSet(n = 10, nset = Nblocks))[1:Ntotal]], # transposing the shuffleSet output gives the desired order
lossD[t(shuffleSet(n = 10, nset = Nblocks))[1:Ntotal]]  # when indexing 1:Ntotal loss values
)
# check the expected values of a couple random blocks
colSums(gainMat[1:10, ] + lossMat[1:10, ])
colSums(gainMat[51:60, ] + lossMat[51:60, ])
# define agent parameters ----
alpha = c(0.1, 0.5, 0.9)
beta = c(1, 1, 1) # c(5, 5, 5)
W = c(1.5, 1.5, 1.5) # here a weight on losses assuming the weight on gains = 1
# prepare the data for JAGS ----
D= dim(lossMat)[2] #number of decks
dat1 <- dump.format(list(T=Ntotal, D = D, losses = lossMat, gains = gainMat, g.alpha = alpha[1], g.beta = beta[1], g.W = W[1]))
dat2 <- dump.format(list(T=Ntotal, D = D, losses = lossMat, gains = gainMat, g.alpha = alpha[2], g.beta = beta[2], g.W = W[2]))
dat3 <- dump.format(list(T=Ntotal, D = D, losses = lossMat, gains = gainMat, g.alpha = alpha[3], g.beta = beta[3], g.W = W[3]))
# Tell JAGS what to monitor in the simulations ----
monitor = c("choices")
# Run the sims with JAGS using the model block
#   in this case "sample" is the number of unique simulations
# agent 1
out1 <- run.jags(model="../models/model_block_sim_cardGame.txt",
monitor=monitor, data=dat1,
burnin =1, sample=3, thin = 1, n.chains=1, summarise=FALSE)
simMat1 = out1$mcmc[[1]]
sims1 = as.vector(simMat1[1,]) #take one iteration of the simulations
#agent 2
out2 <- run.jags(model="../models/model_block_sim_cardGame.txt",
monitor=monitor, data=dat2,
burnin =1, sample=3, thin = 1, n.chains=1, summarise=FALSE)
simMat2 = out2$mcmc[[1]]
sims2 = as.vector(simMat2[1,]) #take one iteration of the simulations
#agent 3
out3 <- run.jags(model="../models/model_block_sim_cardGame.txt",
monitor=monitor, data=dat3,
burnin =1, sample=3, thin = 1, n.chains=1, summarise=FALSE)
simMat3 = out3$mcmc[[1]]
sims3 = as.vector(simMat3[1,]) #take one iteration of the simulations
# --------------------------------
# Fit the simulated choice data
fdat1 <- dump.format(list(T=Ntotal, D = D, losses = lossMat, gains = gainMat, choices=sims1))
fdat2 <- dump.format(list(T=Ntotal, D = D, losses = lossMat, gains = gainMat, choices=sims2))
fdat3 <- dump.format(list(T=Ntotal, D = D, losses = lossMat, gains = gainMat, choices=sims3))
# Tell JAGS what to monitor
monitor = c("alpha", "beta", "W")
# Initialize chains
inits1 <- dump.format(list(alpha=0.1, W=1, beta = 1, .RNG.name="base::Super-Duper", .RNG.seed=99999 ))
inits2 <- dump.format(list(alpha=0.9, W=2, beta = 3, .RNG.name="base::Wichmann-Hill", .RNG.seed=1234 ))
inits3 <- dump.format(list(alpha=0.5, W=0.5, beta = 7, .RNG.name="base::Mersenne-Twister", .RNG.seed=6666 ))
# Run the function that fits the models using JAGS
# run jags
results1 <- run.jags(model="../models/fit_cardGame.txt",
monitor=monitor, data=fdat1,
inits=c(inits1, inits2, inits3),
plots = FALSE,
n.chains=3,
burnin=2000, sample=1000, thin=1)
results2 <- run.jags(model="../models/fit_cardGame.txt",
monitor=monitor, data=fdat2,
inits=c(inits1, inits2, inits3),
plots = FALSE,
n.chains=3,
burnin=2000, sample=1000, thin=1)
results3 <- run.jags(model="../models/fit_cardGame.txt",
monitor=monitor, data=fdat3,
inits=c(inits1, inits2, inits3),
plots = FALSE,
n.chains=3,
burnin=2000, sample=1000, thin=1)
rbind(summary(results1), summary(results2), summary(results3))
c1 = as.data.frame(rbind(results1$mcmc[[1]], results1$mcmc[[2]], results1$mcmc[[3]]))
c2 = as.data.frame(rbind(results2$mcmc[[1]], results2$mcmc[[2]], results2$mcmc[[3]]))
c3 = as.data.frame(rbind(results3$mcmc[[1]], results3$mcmc[[2]], results3$mcmc[[3]]))
postEsts = data.frame(alphaEst = c(c1$alpha, c2$alpha, c3$alpha),
betaEst = c(c1$beta, c2$beta, c3$beta),
wEst = c(c1$W, c2$W, c3$W),
gen_alpha = as.factor(rep(alpha, each = length(c1$alpha))))
# plot posterior estimates from all three agents together
all_plot = ggpairs(postEsts, ggplot2::aes(color = gen_alpha, alpha = 0.8))
# examples of separate plots for the posterior chains from each parameter
plotA = ggplot(data = postEsts, aes(x = alphaEst, fill = gen_alpha, color = gen_alpha))
plotA + geom_density(alpha = 0.8) # here alpha is a ggplot parameter, not part of our model/results
plotB = ggplot(data = postEsts, aes(x = betaEst, fill = gen_alpha, color = gen_alpha))
plotB + geom_density(alpha = 0.8) # here alpha is a ggplot parameter, not part of our model/results
# posterior probability Betas differ with alpha = 0.5 vs 0.9
mean((c2$beta - c3$beta) > 0)
# ROPE of c(-0.1, 0.1) for betas being different
bdif = c2$beta - c3$beta
hist(bdif)
abline(v = c(-0.1, 0.1), col = "green")
abline(v = hdi(bdif), col = "red")
plotW = ggplot(data = postEsts, aes(x = wEst, fill = gen_alpha, color = gen_alpha))
plotW + geom_density(alpha = 0.8) # here alpha is a ggplot parameter, not part of our model/results
setwd("~/Desktop/LaTex Docs/Video/Jags-Bayesian Analysis/Reinforcement Learning - IGT")
setwd("~/Desktop/LaTex Docs/Video/Jags-Bayesian Analysis/Reinforcement Learning - IGT")
#set up gain/loss outcomes from the IGT ----
Nblocks = 30
Ntotal = Nblocks * 10
gainMat = cbind(
rep(1.00, Ntotal), #deck A
rep(1.00, Ntotal), #deck B
rep(0.50, Ntotal), #deck C
rep(0.50, Ntotal)  #deck D
)
lossA = c(-1.5, -2.0, -2.5, -3.0, -3.5, rep(0, 5))
lossB = c(-12.5, rep(0, 9))
lossC = c(-0.25, rep(-0.50, 3), -0.75, rep(0, 5))
lossD = c(-2.5, rep(0, 9))
shuffleSet(n = 10, nset = Nblocks)
t(shuffleSet(n = 10, nset = Nblocks))
lossMat = cbind(
lossA[t(shuffleSet(n = 10, nset = Nblocks))[1:Ntotal]], # shuffleSet func creates repeated random sequences of 1:10
lossB[t(shuffleSet(n = 10, nset = Nblocks))[1:Ntotal]], # note the transpose function t()
lossC[t(shuffleSet(n = 10, nset = Nblocks))[1:Ntotal]], # transposing the shuffleSet output gives the desired order
lossD[t(shuffleSet(n = 10, nset = Nblocks))[1:Ntotal]]  # when indexing 1:Ntotal loss values
)
# Optional generic preliminaries:
rm(list=ls())  # Careful! This clears all of R's memory!
# Load the required libraries
library(runjags)
library(permute)
library(ggplot2)
library(GGally)
library(HDInterval)
#set up gain/loss outcomes from the IGT ----
Nblocks = 30
Ntotal = Nblocks * 10
gainMat = cbind(
rep(1.00, Ntotal), #deck A
rep(1.00, Ntotal), #deck B
rep(0.50, Ntotal), #deck C
rep(0.50, Ntotal)  #deck D
)
lossA = c(-1.5, -2.0, -2.5, -3.0, -3.5, rep(0, 5))
lossB = c(-12.5, rep(0, 9))
lossC = c(-0.25, rep(-0.50, 3), -0.75, rep(0, 5))
lossD = c(-2.5, rep(0, 9))
lossMat = cbind(
lossA[t(shuffleSet(n = 10, nset = Nblocks))[1:Ntotal]], # shuffleSet func creates repeated random sequences of 1:10
lossB[t(shuffleSet(n = 10, nset = Nblocks))[1:Ntotal]], # note the transpose function t()
lossC[t(shuffleSet(n = 10, nset = Nblocks))[1:Ntotal]], # transposing the shuffleSet output gives the desired order
lossD[t(shuffleSet(n = 10, nset = Nblocks))[1:Ntotal]]  # when indexing 1:Ntotal loss values
)
View(lossMat)
# check the expected values of a couple random blocks
colSums(gainMat[1:10, ] + lossMat[1:10, ])
colSums(gainMat[51:60, ] + lossMat[51:60, ])
# define agent parameters ----
alpha = c(0.1, 0.5, 0.9)
# beta = c(1, 1, 1)
W = c(1.5, 1.5, 1.5) # here a weight on losses assuming the weight on gains = 1
# prepare the data for JAGS ----
D = dim(lossMat)[2] #number of decks
dat1 <- dump.format(list(T=Ntotal, D = D, losses = lossMat, gains = gainMat, alpha = alpha[1], W = W[1]))
dat2 <- dump.format(list(T=Ntotal, D = D, losses = lossMat, gains = gainMat, alpha = alpha[2], W = W[2]))
dat3 <- dump.format(list(T=Ntotal, D = D, losses = lossMat, gains = gainMat, alpha = alpha[3], W = W[3]))
# Tell JAGS what to monitor in the simulations ----
monitor = c("choices","q")
# Run the sims with JAGS using the model block
#   in this case "sample" is the number of unique simulations
# agent 1
out1 <- run.jags(model="../models/model_block_sim_cardGame.txt",
monitor=monitor, data=dat1,
burnin =1, sample=3, thin = 1, n.chains=1, summarise=FALSE)
# Run the sims with JAGS using the model block
#   in this case "sample" is the number of unique simulations
# agent 1
out1 <- run.jags(model="models/simulate_IGT.txt",
monitor=monitor, data=dat1,
burnin =1, sample=3, thin = 1, n.chains=1, summarise=FALSE)
# Run the sims with JAGS using the model block
#   in this case "sample" is the number of unique simulations
# agent 1
out1 <- run.jags(model="models/simulate_IGT.txt",
monitor=monitor, data=dat1,
burnin =1, sample=3, thin = 1, n.chains=1, summarise=FALSE)
# Run the sims with JAGS using the model block
#   in this case "sample" is the number of unique simulations
# agent 1
out1 <- run.jags(model="models/simulate_IGT.txt",
monitor=monitor, data=dat1,
burnin =1, sample=3, thin = 1, n.chains=1, summarise=FALSE)
# Run the sims with JAGS using the model block
#   in this case "sample" is the number of unique simulations
# agent 1
out1 <- run.jags(model="models/simulate_IGT.txt",
monitor=monitor, data=dat1,
burnin =1, sample=3, thin = 1, n.chains=1, summarise=FALSE)
View(out1)
simMat1 = out1$mcmc[[1]]
sims1 = as.vector(simMat1[1,]) #take one iteration of the simulations
View(sim1)
View(sims1)
View(simMat1)
# Run the sims with JAGS using the model block
#   in this case "sample" is the number of unique simulations
# agent 1
out1 <- run.jags(model="models/simulate_IGT.txt",
monitor=monitor, data=dat1,
burnin =1, sample=1, thin = 1, n.chains=1, summarise=FALSE)
simMat1 = out1$mcmc[[1]]
View(simMat1)
sims1 = as.vector(simMat1[1,1:300]) #take one iteration of the simulations
Qs1 = c(simMat1[1,601],simMat1[1,902],simMat1[1,1203],simMat1[1,1504])
#agent 2
out2 <- run.jags(model="models/simulate_IGT.txt",
monitor=monitor, data=dat2,
burnin =1, sample=1, thin = 1, n.chains=1, summarise=FALSE)
simMat2 = out2$mcmc[[1]]
sims2 = as.vector(simMat2[1,1:300]) #take one iteration of the simulations
Qs2 = c(simMat2[1,601],simMat2[1,902],simMat2[1,1203],simMat2[1,1504])
#agent 3
out3 <- run.jags(model="models/simulate_IGT.txt",
monitor=monitor, data=dat3,
burnin =1, sample=1, thin = 1, n.chains=1, summarise=FALSE)
simMat3 = out3$mcmc[[1]]
sims3 = as.vector(simMat3[1,1:300]) #take one iteration of the simulations
Qs1 = c(simMat3[1,601],simMat3[1,902],simMat3[1,1203],simMat3[1,1504])
Qs1 = c(simMat1[1,601],simMat1[1,902],simMat1[1,1203],simMat1[1,1504])
Qs3 = c(simMat3[1,601],simMat3[1,902],simMat3[1,1203],simMat3[1,1504])
# check the expected values of a couple random blocks
colSums(gainMat[1:10, ] + lossMat[1:10, ])
colSums(gainMat[51:60, ] + lossMat[51:60, ])
# define agent parameters ----
alpha = c(0.1, 0.6, 0.6)
# beta = c(1, 1, 1)
W = c(1.5, 1.5, 3) # here a weight on losses assuming the weight on gains = 1
# prepare the data for JAGS ----
D = dim(lossMat)[2] #number of decks
dat1 <- dump.format(list(T=Ntotal, D = D, losses = lossMat, gains = gainMat, alpha = alpha[1], W = W[1]))
dat2 <- dump.format(list(T=Ntotal, D = D, losses = lossMat, gains = gainMat, alpha = alpha[2], W = W[2]))
dat3 <- dump.format(list(T=Ntotal, D = D, losses = lossMat, gains = gainMat, alpha = alpha[3], W = W[3]))
# Tell JAGS what to monitor in the simulations ----
monitor = c("choices","q")
# Run the sims with JAGS using the model block
#   in this case "sample" is the number of unique simulations
# agent 1
out1 <- run.jags(model="models/simulate_IGT.txt",
monitor=monitor, data=dat1,
burnin =1, sample=1, thin = 1, n.chains=1, summarise=FALSE)
simMat1 = out1$mcmc[[1]]
sims1 = as.vector(simMat1[1,1:300]) #take one iteration of the simulations
Qs1 = c(simMat1[1,601],simMat1[1,902],simMat1[1,1203],simMat1[1,1504])
#agent 2
out2 <- run.jags(model="models/simulate_IGT.txt",
monitor=monitor, data=dat2,
burnin =1, sample=1, thin = 1, n.chains=1, summarise=FALSE)
simMat2 = out2$mcmc[[1]]
sims2 = as.vector(simMat2[1,1:300]) #take one iteration of the simulations
Qs2 = c(simMat2[1,601],simMat2[1,902],simMat2[1,1203],simMat2[1,1504])
#agent 3
out3 <- run.jags(model="models/simulate_IGT.txt",
monitor=monitor, data=dat3,
burnin =1, sample=1, thin = 1, n.chains=1, summarise=FALSE)
simMat3 = out3$mcmc[[1]]
sims3 = as.vector(simMat3[1,1:300]) #take one iteration of the simulations
Qs3 = c(simMat3[1,601],simMat3[1,902],simMat3[1,1203],simMat3[1,1504])
plot(sims1)
plot(1:300,sims1)
lines(1:300,sims1)
hist(sims1)
barplot(sims1)
barplot(table(sims1))
# Run the sims with JAGS using the model block
#   in this case "sample" is the number of unique simulations
# agent 1
out1 <- run.jags(model="models/simulate_IGT.txt",
monitor=monitor, data=dat1,
burnin =1, sample=1, thin = 1, n.chains=1, summarise=FALSE)
simMat1 = out1$mcmc[[1]]
sims1 = as.vector(simMat1[1,1:300]) #take one iteration of the simulations
Qs1 = c(simMat1[1,601],simMat1[1,902],simMat1[1,1203],simMat1[1,1504])
#agent 2
out2 <- run.jags(model="models/simulate_IGT.txt",
monitor=monitor, data=dat2,
burnin =1, sample=1, thin = 1, n.chains=1, summarise=FALSE)
simMat2 = out2$mcmc[[1]]
sims2 = as.vector(simMat2[1,1:300]) #take one iteration of the simulations
Qs2 = c(simMat2[1,601],simMat2[1,902],simMat2[1,1203],simMat2[1,1504])
#agent 3
out3 <- run.jags(model="models/simulate_IGT.txt",
monitor=monitor, data=dat3,
burnin =1, sample=1, thin = 1, n.chains=1, summarise=FALSE)
simMat3 = out3$mcmc[[1]]
sims3 = as.vector(simMat3[1,1:300]) #take one iteration of the simulations
Qs3 = c(simMat3[1,601],simMat3[1,902],simMat3[1,1203],simMat3[1,1504])
# beta = c(1, 1, 1)
W = c(1, 1, 3) # here a weight on losses assuming the weight on gains = 1
# prepare the data for JAGS ----
D = dim(lossMat)[2] #number of decks
dat1 <- dump.format(list(T=Ntotal, D = D, losses = lossMat, gains = gainMat, alpha = alpha[1], W = W[1]))
dat2 <- dump.format(list(T=Ntotal, D = D, losses = lossMat, gains = gainMat, alpha = alpha[2], W = W[2]))
dat3 <- dump.format(list(T=Ntotal, D = D, losses = lossMat, gains = gainMat, alpha = alpha[3], W = W[3]))
# Tell JAGS what to monitor in the simulations ----
monitor = c("choices","q")
# Run the sims with JAGS using the model block
#   in this case "sample" is the number of unique simulations
# agent 1
out1 <- run.jags(model="models/simulate_IGT.txt",
monitor=monitor, data=dat1,
burnin =1, sample=1, thin = 1, n.chains=1, summarise=FALSE)
simMat1 = out1$mcmc[[1]]
sims1 = as.vector(simMat1[1,1:300]) #take one iteration of the simulations
Qs1 = c(simMat1[1,601],simMat1[1,902],simMat1[1,1203],simMat1[1,1504])
#agent 2
out2 <- run.jags(model="models/simulate_IGT.txt",
monitor=monitor, data=dat2,
burnin =1, sample=1, thin = 1, n.chains=1, summarise=FALSE)
simMat2 = out2$mcmc[[1]]
sims2 = as.vector(simMat2[1,1:300]) #take one iteration of the simulations
Qs2 = c(simMat2[1,601],simMat2[1,902],simMat2[1,1203],simMat2[1,1504])
#agent 3
out3 <- run.jags(model="models/simulate_IGT.txt",
monitor=monitor, data=dat3,
burnin =1, sample=1, thin = 1, n.chains=1, summarise=FALSE)
simMat3 = out3$mcmc[[1]]
sims3 = as.vector(simMat3[1,1:300]) #take one iteration of the simulations
Qs3 = c(simMat3[1,601],simMat3[1,902],simMat3[1,1203],simMat3[1,1504])
# count the times each deck was sampled
barplot(table(sims1))
barplot(table(sims2))
barplot(table(sims3))
# Optional generic preliminaries:
rm(list=ls())  # Careful! This clears all of R's memory!
#set up gain/loss outcomes from the IGT ----
Nblocks = 30
Ntotal = Nblocks * 10
gainMat = cbind(
rep(1.00, Ntotal), #deck A
rep(1.00, Ntotal), #deck B
rep(0.50, Ntotal), #deck C
rep(0.50, Ntotal)  #deck D
)
View(gainMat)
lossA = c(-1.5, -2.0, -2.5, -3.0, -3.5, rep(0, 5))
lossB = c(-12.5, rep(0, 9))
lossC = c(-0.25, rep(-0.50, 3), -0.75, rep(0, 5))
lossD = c(-2.5, rep(0, 9))
lossMat = cbind(
lossA[t(shuffleSet(n = 10, nset = Nblocks))[1:Ntotal]], # shuffleSet func creates repeated random sequences of 1:10
lossB[t(shuffleSet(n = 10, nset = Nblocks))[1:Ntotal]], # note the transpose function t()
lossC[t(shuffleSet(n = 10, nset = Nblocks))[1:Ntotal]], # transposing the shuffleSet output gives the desired order
lossD[t(shuffleSet(n = 10, nset = Nblocks))[1:Ntotal]]  # when indexing 1:Ntotal loss values
)
View(lossMat)
# check the expected values of a couple random blocks
colSums(gainMat[1:10, ] + lossMat[1:10, ])
colSums(gainMat[51:60, ] + lossMat[51:60, ])
alpha = c(0.1, 0.6, 0.6)
# beta = c(1, 1, 1)
W = c(1, 1, 3) # here a weight on losses assuming the weight on gains = 1
# prepare the data for JAGS ----
D = dim(lossMat)[2] #number of decks
dat1 <- dump.format(list(T=Ntotal, D = D, losses = lossMat, gains = gainMat, alpha = alpha[1], W = W[1]))
dat2 <- dump.format(list(T=Ntotal, D = D, losses = lossMat, gains = gainMat, alpha = alpha[2], W = W[2]))
dat3 <- dump.format(list(T=Ntotal, D = D, losses = lossMat, gains = gainMat, alpha = alpha[3], W = W[3]))
# Tell JAGS what to monitor in the simulations ----
monitor = c("choices","q")
# Run the sims with JAGS using the model block
#   in this case "sample" is the number of unique simulations
# agent 1
out1 <- run.jags(model="models/simulate_IGT.txt",
monitor=monitor, data=dat1,
burnin =1, sample=1, thin = 1, n.chains=1, summarise=FALSE)
simMat1 = out1$mcmc[[1]]
sims1 = as.vector(simMat1[1,1:300]) #take one iteration of the simulations
Qs1 = c(simMat1[1,601],simMat1[1,902],simMat1[1,1203],simMat1[1,1504])
#agent 2
out2 <- run.jags(model="models/simulate_IGT.txt",
monitor=monitor, data=dat2,
burnin =1, sample=1, thin = 1, n.chains=1, summarise=FALSE)
simMat2 = out2$mcmc[[1]]
sims2 = as.vector(simMat2[1,1:300]) #take one iteration of the simulations
Qs2 = c(simMat2[1,601],simMat2[1,902],simMat2[1,1203],simMat2[1,1504])
#agent 3
out3 <- run.jags(model="models/simulate_IGT.txt",
monitor=monitor, data=dat3,
burnin =1, sample=1, thin = 1, n.chains=1, summarise=FALSE)
simMat3 = out3$mcmc[[1]]
sims3 = as.vector(simMat3[1,1:300]) #take one iteration of the simulations
Qs3 = c(simMat3[1,601],simMat3[1,902],simMat3[1,1203],simMat3[1,1504])
# count the times each deck was sampled
barplot(table(sims1))
barplot(table(sims2))
barplot(table(sims3))
